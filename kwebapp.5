.\"	$Id$
.\"
.\" Copyright (c) 2017 Kristaps Dzonsons <kristaps@bsd.lv>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate$
.Dt KWEBAPP 5
.Os
.Sh NAME
.Nm kwebapp
.Nd syntax for kwebapp configuration
.Sh DESCRIPTION
The
.Nm
configuration is used by
.Xr kwebapp 1
to define how an application's data types; the data itself; how the data
is created, modified, and deleted; and how the data is queried.
.Pp
Configurations have the following rough structure:
.Bd -literal -offset indent
config :== [ enum | bitfield | struct ]+ [ roles ]?
roles :== "roles" "{"
  [ "role" roledata ";" ]+
"};"
struct :== "struct" structname "{"
  [ "comment" string_literal ";" ]?
  [ "delete" deletedata ";" ]*
  [ "field" fielddata ";" ]+
  [ "insert" ";" ]*
  [ "iterate" searchdata ";" ]*
  [ "list" searchdata ";" ]*
  [ "roles" roledata ";" ]*
  [ "search" searchdata ";" ]*
  [ "unique" uniquedata ";" ]*
  [ "update" updatedata ";" ]*
"};"
enum :== "enum" enumname "{"
  [ "comment" string_literal ";" ]?
  [ "item" enumdata ";" ]+
"};"
bitfield :== "bits" bitsname "{"
  [ "comment" string_literal ";" ]?
  [ "item" bitsdata ";" ]+
  [ "unset" "jslabel" quoted_string ";" ]+
"};"
.Ed
.Pp
In short, one or more structure definitions, zero or more enumerations
and bitfields, and zero or one role definition.
.Pp
.Sx Structures
describe data structures and operations (queries, insertions, updates,
deletions).
.Sx Fields
contained in each structure describe data fields, validation
constraints, and so on.
.Pp
.Sx Enumerations
define fixed constants used in data field definitions.
These are used only for validation and for formatting output data.
.Sx Bitfields
are similar to enumerations except that they describe bits set in a
single value instead of independent values.
.Pp
.Sx Roles
stipulate the use of role-based access control on data operations.
.Pp
Collectively, these are called a configuration's
.Dq objects .
.Sh SYNTAX
In
.Nm ,
white-space serves only to separate tokens: it is discarded
except as found within quoted literals.
Thus, the following are identical except for the name:
.Bd -literal -offset indent
struct foo {
  field id int rowid;
};

struct bar{field id int rowid;};
.Ed
.Pp
Except for the content of string literals, a
.Nm
configuration only recognises ASCII characters.
.Ss Identifiers
Objects are generally named by an identifier.
These are always case-insensitive alphanumeric non-empty string
beginning with a letter.
There are many disallowed or reserved identifiers.
There are also unique name constraints to consider (e.g., no two
structures can have the same name, etc.).
.Pp
An example identifier:
.Bd -literal -offset indent
enum foobar { ... };
.Ed
.Pp
A non-confirming identifier may be:
.Bd -literal -offset indent
enum foo_bar { ... };
.Ed
.Ss String literals
Another comment syntactic element is the string literal: a double-quoted
string where internal double quotes may be escaped by a single preceding
backslash.
.Bd -literal -offset indent
struct ident { field id int comment "\e"Literal\e"."; };
.Ed
.Ss Comments
Document comments are begun by the hash mark
.Pq Dq #
and extend to the end of the line.
.Bd -literal -offset indent
# This is my structure.

struct ident {
  field id int comment "\e"Literal\e"."; # End of line.
};
.Ed
.Pp
They are always discarded and not considered part of the parsed
configuration file.
These syntactic comments shouldn't be confused with the
.Cm comment
statements possible for individual statements.
.Ss Numbers
Both decimal and integral numbers are recognised.
Integral numbers are signed and limited to 64 bits and formatted as
.Li [-]?[0-9]+ .
Decimal numbers are similarly formatted as
.Li [-]?[0-9]+.[0-9]* .
The difference between the two is the existence of the decimal.
.Sh SEMANTICS
Every
.Nm
document consists of a set of top-level objects.
These objects describe data types (enumerations and bit-fields), data
and operations (structures and their fields), and access control
(roles).
.Pp
There are no ordering constraints on objects: all linkage between
components (e.g., referenced fields, roles, types, etc.) occurs after
parsing the document.
.Ss Structures
A structure object is the foundational type of
.Nm .
It is similar to a class and consists primarily of data definitions and
operations.
A structure is represented as a struct in a C API along with functions
operating on that struct.
In SQL, it is a table.
.Pp
Its definition begins with the word
.Cm struct ,
then the unique identifier of the structure, then elements within the
curly braces.
.Bd -literal -offset indent
"struct" structname "{"
  [ "comment" string_literal ";" ]?
  [ "delete" deletedata ";" ]*
  [ "field" fielddata ";" ]+
  [ "insert" ";" ]?
  [ "iterate" searchdata ";" ]*
  [ "list" searchdata ";" ]*
  [ "roles" roledata ";" ]*
  [ "search" searchdata ";" ]*
  [ "unique" uniquedata ";" ]*
  [ "update" updatedata ";" ]*
"};"
.Ed
.Pp
The elements may consist of one or more
.Cm field
describing data fields (see
.Sx Fields ) ;
optionally a
.Cm comment
for describing the structure;
.Sx Comments ) ;
zero or more
.Cm update ,
.Cm delete ,
or
.Cm insert
statements that define data modifiers (see
.Sx Updates ) ;
zero or more
.Cm unique
statements that create unique constraints on multiple fields (see
.Sx Uniques ) ;
and zero or more
.Cm list ,
.Cm iterate ,
or
.Cm search
statements that define data queries (see
.Sx Queries ) .
Lastly, the
.Cm roles
statement describes modifiers and queries available to roles (see
.Sx Roles ) .
.Ss Fields
A field object defines the data contained within a structure.
In the C API, a field is a struct member.
In SQL, it is a column specification.
Each field consists of the word
.Cm field
followed by an identifier
.Cm name
and, optionally, a
.Cm type
then additional information.
.Bd -literal -offset indent
"field" name[":" target]? [type [typeinfo]*]? ";"
.Ed
.Pp
The
.Cm name
may either be a standalone identifier or a
.Dq foreign key
referencing a field in another structure by the structure and field
name.
In this case, the referenced field must be a
.Cm rowid
or
.Cm unique
and have the same type.
.Pp
The
.Cm type ,
if specified,
may be one of the following:
.Bl -tag -width Ds
.It Cm bit
Native integer constained to 64-bit bit index (that is, 0\(en64).
The bit indices start from 1 in order to represent a zero value (no bits
to set).
Each non-zero value is usually merged into a bit-field by setting
.Li 1u << (value - 1)
for some input or output value.
For entire bitfields, see
.Cm bits .
.It Cm bits Ar name
Native type mapping into a 64-bit integer, constrained to valid
bitfield
.Ar name .
See
.Sx Bitfields
for more documentation.
.It Cm blob
Native type mapping into a fixed-size binary buffer.
.It Cm email
Native type mapping into a nil-terminated character string, constrained
to e-mail address format.
.It Cm enum Ar name
Native type mapping into a 64-bit integer, constrained to valid
enumeration values of
.Ar name .
See
.Sx Enumerations
for more documentation.
.It Cm int
Native type mapping into a 64-bit integer,
.Vt int64_t .
.It Cm password
Native type mapping into a nil-terminated character string.
This field is special in that it converts an input password into a hash
before insertion into the database.
It also can properly search for password hashes by running the hash
verification after extraction.
Thus, there is a difference between a password field that is being
inserted or updated (as a password, which is hashed) and extracted using
a search (as a hash).
.It Cm real
Native type mapping into a double-precision float.
.It Cm epoch
Native type mapping into a 64-bit integer, constrained to valid
.Vt time_t
values and similarly represented in the C API.
.It Cm struct Ar field
A non-native type filled in by joining the given
.Ar field
with its referent structure.
This type is
.Dq non-native
because it is not represented in the database schema, and is instead
filled in with the referenced row.
In the C API, this is represented by a
.Vt struct name
of the referent structure.
The
.Ar field
may be marked with
.Cm null ,
but this involves a not-inconsiderable performance hit when querying
(directly or indirectly) on the structure.
.It Cm text
Native type mapping into a nil-terminated character string, usually
encoded in UTF-8.
.El
.Pp
The
.Cm typeinfo
provides further information (or operations) regarding the field, and
may consist of the following:
.Bl -tag -width Ds
.It Cm actdel Ar action
Like
.Cm actup
but on deletion of the field in the database.
.It Cm actup Ar action
SQL actions taken when the field is updated.
May be one of
.Ar none
.Pq do nothing ,
.Ar restrict ,
.Pq disallow if having child referents ,
.Ar nullify
.Pq set child referents to null ,
.Ar cascade ,
.Pq propogate operation to referents ,
or
.Ar default
.Pq set child referents to their default values .
This is only available on foreign key references.
.It Cm comment Ar string_literal
Documents the field using the quoted string.
.It Cm limit Ar limit_op limit_val
Used when generating validation functions.
Only available for native types.
The
.Ar limit_op
argument consists of an operator the
.Ar limit_val
is checked against.
Available operators are
.Ar ge ,
.Ar le ,
.Ar gt ,
.Ar lt ,
and
.Ar eq .
Respectively, these mean the field should be greater than or equal to,
less than or equal to, greater than, less than, or equal to the given
value.
If the field type is
.Cm text ,
.Cm email ,
.Cm password ,
or
.Cm blob ,
this refers to the string (or binary) length in bytes.
For numeric types, it's the value itself.
The given value must match the field type: an integer (which may be
signed) for integers, integer or real-valued for real, or a positive
integer for lengths.
.It Cm noexport
Never exported using the JSON interface.
This is useful for sensitive internal information.
.It Cm null
Accepts null SQL or C values, and is only available for native types.
A
.Cm rowid
field may not also be
.Cm null .
.It Cm rowid
The field is an SQL primary key.
This is only available for the
.Cm int
type and may only appear for one field in a given structure.
.It Cm unique
Has a unique SQL column value.
See
.Sx Uniques
for multi-field unique constraints.
.El
.Pp
A field declaration may consist of any number of
.Cm typeinfo
statements.
.Ss Enumerations
Enumerations constrain an
.Cm int
field type to a specific set of constant values.
They are defined as follows:
.Bd -literal -offset indent
"enum" enumname "{"
  [ "comment" string_literal ";" ]?
  [ "item" name value [params]* ";" ]+
"};"
.Ed
.Pp
For example,
.Bd -literal -offset indent
enum enumname { 
  item "val1" 1 jslabel "Value one"; 
};
.Ed
.Pp
The enumeration
.Cm enumname
must be unique among all enumerations and structures.
.Pp
Items define enumeration values, their constant values, and
documentation.
Each item's
.Cm name
must be unique within an enumeration.
The
.Cm value
is the named constant's value expressed as an integer.
It must also be unique within the enumeration object.
Parameters may be any of the following:
.Bd -literal -offset indent
"comment" string_literal
"jslabel" string_literal
.Ed
.Pp
The item's
.Cm comment
is used to document the field, while
.Cm jslabel
is used only for formatting JavaScript output.
.Pp
The above enumeration would be used in an example field definition as
follows:
.Bd -literal -offset indent
field foo enum enumname;
.Ed
.Pp
This would constrain validation routines to only recognise values
defined for the enumeration.
.Ss Bitfields
Like enumerations, bitfields constrain an
.Cm int
field type to a bit-wise mask of constant values.
They are defined as follows:
.Bd -literal -offset indent
"bits" bitsname "{"
  [ "comment" string_literal ";" ]?
  [ "item" name bitidx [params]* ";" ]+
  [ "unset" "jslabel" quoted_string ";" ]+
"};"
.Ed
.Pp
For example,
.Bd -literal -offset indent
bits bitsname { 
  item "bit1" 0 jslabel "Bit one"; 
  unset jslabel "No bits"; 
};
.Ed
.Pp
The name must be unique among all enumerations, structures, and other
bitfields.
.Pp
Items define bits, their values, and documentation.
Each item's
.Cm name
must be unique within a bitfield.
The
.Cm value
is the named constant's bit index from zero, so a value of zero refers
to the first bit, one to the second bit, and so on.
Each must be unique within the bitfield.
Parameters may be any of the following:
.Bd -literal -offset indent
"comment" string_literal
"jslabel" string_literal
.Ed
.Pp
The item's
.Cm comment
is used to document the field, while
.Cm jslabel
is used only for formatting JavaScript output.
.Pp
The above bitfield would be used in an example field definition as
follows:
.Bd -literal -offset indent
field foo bits bitsname;
.Ed
.Pp
The bitfield's
.Cm comment
is passed into the output media, and the
.Cm unset
statement serves to provide a
.Cm jslabel
for when no bits are set (i.e., the field evaluates to zero).
.Ss Queries
There are three types of searches that may be defined to produce
searching functions on structures:
.Cm search
for an individual row (i.e., on a unique column or with a
.Cm limit
of 1) and store the result in memory, store a
.Cm list
of retrieved results in memory, or
.Cm iterate
a function for each retrieved result in an active query.
.Pp
Queries are always by field, and may be followed by parameters:
.Bd -literal -offset indent
search [term ["," term]*]? [":" [params]* ]? ";"
list [term ["," term]*]? [":" [params]* ]? ";"
iterate [term ["," term]*]? [":" [params]* ]? ";"
.Ed
.Pp
Here,
.Cm term
consists of the possibly-nested field names to search for and an
optional operator.
(Searchers of type
.Cm search
require at least one field.)
Nested fields are in dotted-notation:
.Bd -literal -offset indent
[structure "."]*field [operator]?
.Ed
.Pp
This would produce functions searching the field
.Dq field
within the
.Cm struct
structures as listed.
The following operators may be used:
.Bl -tag -width Ds
.It Cm and , or
Logical AND
.Pq \&&
and logical OR
.Pq \&| ,
respectively.
.It Cm eq , neq
Equality or non-equality binary operator.
The
.Cm eq
operator is the default.
.It Cm lt , gt
Less than or greater than binary operators.
For text, the comparison is lexical; otherwise, it is by value.
.It Cm le , ge
Less than/equality or greater than/equality binary operators.
For text, the comparison is lexical; otherwise, it is by value.
.It Cm like
The LIKE SQL operator.
This only applies to
.Cm text
and
.Cm email
fields.
.It Cm isnull , notnull
Unary operator to check whether the field is null or not null.
.El
.Pp
The
.Cm password
field does not accept any operator but the default check for equality.
.Pp
The
.Cm params
search parameters are a series of key-value pairs:
.Bd -literal -offset indent
"comment" string_literal
"distinct" ["." | [field ["." field]*]]
"limit" limitval["," offsetval]?
"name" searchname
"order" term [type]? ["," term [type]?]*
.Ed
.Pp
The available parameter keys are as follows:
.Bl -tag -width Ds
.It Cm comment
String literal included in the API comments for the function.
.It Cm limit
A value >0 that limits the number of returned results.
By default, there is no limit.
This can be used in a
.Cm search
singleton result statement as a way to limit non-unique results to a
single result.
If followed by a comma, the next term is used to offset the query.
This is usually used to page through results.
.It Cm distinct
Return only distinct rows.
If only a period
.Pq Dq \&.
follows the keyword, then the distinct applies to the entire returned
structure.
If a nested structure follows the keyword, only distinct rows of the
given structure are returned by the search operation.
This does not work with
.Cm null
structures; and moreover, disallows searching by fields of type
.Cm password .
.It Cm name
A unique identifier used in the C API for the search function.
.It Cm order
Result ordering.
The
.Cm term ,
like the search term, consists of order fields with periods indicating
fields nested within structures.
Each term may be followed by an order direction:
.Cm asc
for ascending and
.Cm desc
for descending.
Result ordering is applied from left-to-right.
.El
.Pp
If you're searching (in any way) on a
.Cm password
field, the field is omitted from the initial search, then hash-verified
after being extracted from the database.
Thus, this doesn't have the same performance as a normal search.
.Ss Uniques
While individual fields may be marked
.Cm unique
on a per-column basis, multiple-column unique constraints may be
specified with the
.Cm unique
structure-level keyword.
The syntax is as follows:
.Bd -literal -offset indent
"unique" [fields]2+ ";"
.Ed
.Pp
The
.Cm fields
must be in the local structure, and must be native types.
There must be at least two fields in the statement.
There can be only one unique statement per combination of fields (in any
order).
.Ss Updates
Update statements (update, delete, insert) define how the database will be
modified.
By default, there are no update, delete, or insert functions defined.
The syntax is as follows:
.Bd -literal -offset indent
"update" [mfields]? ":" cfields [":" [params]* ]? ";"
"delete" cfields [":" [params]* ]? ";"
"insert" ";"
.Ed
.Pp
Both
.Cm mfields
and
.Cm cfields
are a sequence of comma-separated native-type fields in the current
structure.
The former refers to the fields that will be modified; the latter refers
to fields that will act as constraints.
In other words, modify fields constraint by
.Cm cfields
to contain the
.Cm cfields .
Usually, the latter will be the
.Cm rowid
and the former will be any other fields.
.Pp
The
.Cm delete
statement obviously does not accept fields to modify.
If the
.Cm update
statement does not have modify fields, it's taken to mean that all
fields will be modified using the default operator.
.Pp
The fields in
.Cm mfields
may also accept a modifier type that modifies the existing field instead
of setting it externally.
This is only available for numeric types.
Each field in
.Cm cfields
may also accept an optional operator type as described for
.Sx Queries .
.Bd -literal -offset indent
mfield [modifier]?
cfield [operator]?
.Ed
.Pp
The following augment operations are available, but only to numeric
types:
.Bl -tag -width Ds
.It Cm inc
Increment the current field by a given value (x = x + ?).
.It Cm dec
Decrement the current field by a given value (x = x - ?).
.It Cm set
Default behaviour of setting to a value (x = ?).
.El
.Pp
The optional parameters may be one of
.Bd -literal -offset indent
"comment" string_literal
"name" name
.Ed
.Pp
The
.Cm name
sets a unique name for the generated function, while
.Cm comment
is used for the API comments.
.Pp
Fields of type
.Cm password
are not allowed as
.Cm cfields
since they are not stored directly as comparable strings, but hashed
with a unique salt.
.Ss Roles
Full role-based access control is available in
.Nm
when a top-level
.Cm roles
block is defined.
.Bd -literal -offset indent
"roles" "{"
   [ "role" name ["{" "role" name... ";" "}"]* ";" ]*
"};"
.Ed
.Pp
This nested structure defines the role tree.
Roles descendent of roles are called sub-roles.
.Pp
By defining
.Cm roles ,
even if left empty, the system will switch into default-deny access
control mode, and each function in
.Sx Structures
must be associated with one or more roles to be used.
.Pp
There are three reserved roles:
.Cm default ,
.Cm none ,
and
.Cm all .
These need not be specified in the
.Cm roles
statement.
The first may be used for the initial state of the system (before a role
has been explicitly assigned), the second refers to the empty role that
can do nothing, and the third contains all explicitly-defined roles.
.Pp
Within
.Sx Structures ,
roles are defined as follows:
.Bd -literal -offset indent
"roles" role ["," role]* "{" roletype [name]? "};"
.Ed
.Pp
The
.Cm role
is a list of roles as defined in the top-level block, or one of the
reserved roles but for
.Cm none ,
which can never be assigned.
The role may be one of the following types:
.Bl -tag -width Ds
.It Cm all
A special type referring to all function types.
.It Cm delete
The named delete operation.
.It Cm insert
The insert operation.
.It Cm iterate
The named iterate operation.
.It Cm list
The named list operation.
.It Cm search
The named search operation.
.It Cm update
The name update operation.
.El
.Pp
To refer to an operation, use its
.Cm name .
The only way to refer to un-named operations is to use
.Cm all ,
which refers to all operations.
.Pp
If, during run-time, the current role is not a subtype (inclusive) of
the given role for an operation, the application is immediately
terminated.
.Ss Comments
Comments attached to statements are used to document the output and
serve no other purpose.
For the time being, there is no syntax attached to comments: they should
be considered opaque text for the time being, and copied as-is into the
output documentation.
.Sh EXAMPLES
A trivial example is as follows:
.Bd -literal
struct user {
  field name text;
  field id int rowid;
  comment "A regular user.";
};

struct session {
  field user struct userid;
  field userid:user.id comment "Associated user.";
  field token int comment "Random cookie.";
  field ctime epoch comment "Creation time.";
  field id int rowid;
  comment "Authenticated session.";
};
.Ed
.Pp
This generates two C structures,
.Li user
and
.Li session ,
consisting of the given fields.
The
.Li session
structure contains a
.Li struct user
as well; thus, there is a declarative order that
.Xr kwebapp 1
enforces when writing out structures.
.Pp
The SQL interface, when fetching a
.Li struct session ,
will employ an
.Li INNER JOIN
over the user identifier and session
.Li userid
field.
.Sh SEE ALSO
.Xr kwebapp 1
.\" .Sh STANDARDS
.\" .Sh HISTORY
.\" .Sh AUTHORS
.\" .Sh CAVEATS
.\" .Sh BUGS
